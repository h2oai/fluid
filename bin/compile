#!/usr/bin/env node
// Generated by CoffeeScript 1.9.3
(function() {
  var _, app_coffee, app_js, argv, deploy, dist_dir, fluid, fs, fse, html, js, output_dir, path, ref, ref1, script, scriptTags, scripts, stylesheet, stylesheetTags, stylesheets;

  argv = require('minimist')(process.argv.slice(2));

  path = require('path');

  fs = require('fs');

  fse = require('fs-extra');

  fluid = require('../fluid.js');

  _ = require('lodash');

  app_coffee = argv._[0];

  js = fluid._compile(fse.readFileSync(app_coffee, {
    encoding: 'utf8'
  }));

  output_dir = path.dirname(app_coffee);

  app_js = path.join(output_dir, path.basename(app_coffee, path.extname(app_coffee)) + '.js');

  fse.writeFileSync(app_js, js, {
    encoding: 'utf8'
  });

  dist_dir = path.join(__dirname, '..', 'dist');

  deploy = function(name) {
    return fse.copySync(path.join(dist_dir, name), path.join(output_dir, name));
  };

  deploy('fluid.css');

  deploy('fluid.js');

  scripts = (ref = argv.script) != null ? ref : [];

  if (!_.isArray(scripts)) {
    scripts = [scripts];
  }

  scriptTags = (function() {
    var i, len, results;
    results = [];
    for (i = 0, len = scripts.length; i < len; i++) {
      script = scripts[i];
      results.push("<script src=\"" + script + "\"></script>");
    }
    return results;
  })();

  stylesheets = (ref1 = argv.stylesheet) != null ? ref1 : [];

  if (!_.isArray(stylesheets)) {
    stylesheets = [stylesheets];
  }

  stylesheetTags = (function() {
    var i, len, results;
    results = [];
    for (i = 0, len = stylesheets.length; i < len; i++) {
      stylesheet = stylesheets[i];
      results.push("<link href=\"" + stylesheet + "\" rel=\"stylesheet\" type=\"text/css\">");
    }
    return results;
  })();

  html = fse.readFileSync(path.join(dist_dir, 'index.html'), {
    encoding: 'utf8'
  });

  html = html.replace('<!--fluid_styles-->', stylesheetTags.join(''));

  html = html.replace('<!--fluid_scripts-->', scriptTags.join(''));

  fse.writeFileSync(path.join(output_dir, 'index.html'), html, {
    encoding: 'utf8'
  });

}).call(this);
